{
    "collab_server" : "",
    "contents" : "ITERATIONS = 5\n\nSOURCE_FILE = \"C:/Users/Atif/Desktop/Final-ATLExpWithInteger-Combined-New.txt\"\nPAIRED_FILE = \"C:/Users/Atif/Desktop/results.txt\"\n\ngeneral <-  function() \n{\n  # alg   id found\n  dt <- read.table(SOURCE_FILE,header=T)\n  algs = sort(unique(dt$Algo))\n  \n  ids = sort(unique(dt$id))\n  for(a in algs)\n  {\n    \n    f = c(1:length(ids))\n    \n    for(j in 1:length(ids))\n    {\n      id = ids[[j]]\n      tmp = length(dt[dt$Algo==a & dt$id==id & dt$Found=='true',ITERATIONS])\n      f[[j]] = tmp\n    }\n    \n    print(c(a,':',mean(f)))\n  }\n}\n\n\npairedTests <- function()\n{\n  # alg   id found\n  \n  dt <- read.table(SOURCE_FILE,header=T)\n  \n  algs = unique(dt$Algo)\n  ids = sort(unique(dt$id))\n  \n  z = list() \n  \n  for(i  in 1:length(algs))\n  {\t\n    a = algs[[i]]\n    \n    f = c(1:length(ids))\n    \n    for(j in 1:length(ids))\n    {\n      id = ids[[j]]\n      tot = length(dt[dt$Algo==a & dt$id==id ,ITERATIONS])\n      suc = length(dt[dt$Algo==a & dt$id==id & dt$Found=='true',ITERATIONS])\n      sr = suc/tot\n      f[[j]] = sr \n    }\n    \n    z[[i]] = f \t\t\n  }\n  \n  \n  unlink(PAIRED_FILE)\n  sink(PAIRED_FILE, append=TRUE, split=TRUE)\n \n  cat(algs,\"\\n\")\n  cat(c(\"AVM\",\"(1+1)EA\",\"GA\",\"RS\"),\"\\n\")\n  \n  cat(\"AVM:\",z[[1]],\"\\n\")\n  cat(\"(1+1)EA\",z[[2]],\"\\n\")\n  cat(\"GA\",z[[3]],\"\\n\")\n  cat(\"RS\",z[[4]],\"\\n\")\n  \n  cat(\"\\nPAIRED TESTS\\n\")\n  \n  for(x in 1:(length(algs)-1))\n    for(y in (x+1):length(algs))\n    {\n      w = wilcox.test(z[[x]],z[[y]],paired=TRUE)\n      cat(\"(\",x,\",\",y,\") pvalue = \",w$p.value,\"\\n\")\n    }\n  \n  sink()\n}\n\n\nsuccessrateI <-  function()\n{\n  \n  files <- c(1,1,2)\n  files <- c(\"output_1.txt\",\"output_2.txt\")\n  # alg   id found\n  \n  #dt <- read.table(paste(\"output_.txt\", sep=\"\",collapse=\"\"),header=T)\n  dt <- read.table(SOURCE_FILE,header=T)\n  \n  algos = sort(unique(dt$Algo))\n  probs = sort(unique(dt$id))\n  types = sort(unique(dt$Type))\n  \n  cat(\"Algo \\t Id \\t type \\t TotRun \\t SuccRun \\t SR\")\n  cat(\"\\n\")\n  \n  for(a in algos)\n  {\t\n    for(t in types)\n    {\n      for(prob in probs)\n      {\n        tot = length(dt[dt$Algo==a & dt$id==prob & dt$Type==t ,ITERATIONS])\n        suc = length(dt[dt$Algo==a & dt$id==prob & dt$Type == t & dt$Found=='true',ITERATIONS])\n        sr = suc/tot\n        \n        cat(a, \"\\t\", prob, \"\\t\", t, \"\\t\", tot , \"\\t\", suc, \"\\t\", sr)\n        cat(\"\\n\")\n      }\n    }\n    \n  }\n  \n}\n\n\n\nsuccessrate_pVal <-  function()\n{\n  \n  files <- c(1,1,2)\n  files <- c(\"output_1.txt\",\"output_2.txt\")\n  # alg   id found\n  \n  #dt <- read.table(paste(\"output_.txt\", sep=\"\",collapse=\"\"),header=T)\n  dt <- read.table(SOURCE_FILE,header=T)\n  \n  algos = sort(unique(dt$Algo))\n  probs = sort(unique(dt$id))\n  types = sort(unique(dt$Type))\n  \n  cat(\"Algo \\t Id \\t type \\t TotRun \\t SuccRun \\t SR\")\n  cat(\"\\n\")\n  \n  for(a in algos)\n  {  \n    for(t in types)\n    {\n      for(prob in probs)\n      {\n        \n        tot = length(dt[dt$Algo==a & dt$id==prob & dt$Type==t ,ITERATIONS])\n        suc = length(dt[dt$Algo==a & dt$id==prob & dt$Type == t & dt$Found=='true',ITERATIONS])\n        sr = suc/tot\n        iterationValues=dt[dt$Algo==a & dt$id==prob & dt$Type==t ,ITERATIONS];\n        cat(a, \"\\t\", prob, \"\\t\", t, \"\\t\", tot , \"\\t\", suc, \"\\t\", sr)\n        cat(\"\\n\")\n        \n      }\n      \n    }\n    \n  }\n}\nsuccessrate_table1 <-  function()\n{\n  files <- c(1,1,2)\n  files <- c(\"output_1.txt\",\"output_2.txt\")\n  # alg   id found\n  \n  #dt <- read.table(paste(\"output_.txt\", sep=\"\",collapse=\"\"),header=T)\n  dt <- read.table(SOURCE_FILE,header=T)\n  \n  algos = sort(unique(dt$Algo))\n  probs = sort(unique(dt$id))\n  types = sort(unique(dt$Type))\n  \n  \n  cat(\"Algo \\t Id \\t S(IM)\\t S(NIM) \\t O/A \\t p-value\")\n  cat(\"\\n\")\n  \n  for(a in algos)\n  {  \n    for(prob in probs)\n    {\n      pvA <- -1\n      pvE <- -1\n      eff<--99\n      AVal<--999\n      index <-1\n      typeCount <-1\n      tot = list()\n      suc= list()\n      fail= list()\n      sr= list()\n      \n      for(t in types)\n      {\n        tot[index] = length(dt[dt$Algo==a & dt$id==prob & dt$Type==t ,ITERATIONS])\n        suc[index] = length(dt[dt$Algo==a & dt$id==prob & dt$Type == t & dt$Found=='true',ITERATIONS])\n        fail[index] = length(dt[dt$Algo==a & dt$id==prob & dt$Type == t & dt$Found=='false',ITERATIONS])\n        sr[index] = suc[[index]]/tot[[index]]\n        \n        v=dt[dt$Algo==a & dt$id==prob & dt$Type==\"Break\" ,ITERATIONS];\n        z=dt[dt$Algo==a & dt$id==prob & dt$Type==\"Combined\" ,ITERATIONS];\n        \n        \n        index=index+1\n        typeCount =typeCount +1\n      }\n      a1=suc[[1]]\n      b=suc[[2]]\n      n=tot[[1]]\n      m=tot[[2]]\n      c=fail[[1]]\n      e=fail[[2]]\n      sr_first = a1/n\n      sr_other = b/m\n      different_sr = FALSE\n      \n      if(!is.na(sr_first) & !is.na(sr_other) & sr_first != sr_other)\n      {\n        ### is it actually significant?\n        \n        d = 0.5\n        \n        #  \todds1 = ((a+d)/(n+d-a))  /  ((b+d)/(m+d-b)) \n        #\t\todds2 = ((b+d)/(m+d-b))  /  ((a+d)/(n+d-a)) \n        \n        mat = matrix(c(a1,n-a1,b,m-b), 2 ,2)\n        ft = fisher.test(mat,conf.int = FALSE)\n        pvE = ft$p.value  \n        \n        #eff = ((a1+d)/(c+d)) * ((b+d)/(e+d))\n        eff  = ((a1+d)*(e+d))   /  ((b+d)*(c+d))\n        \n        \n        if(!is.nan(pvE) & pvE <= 0.05)\n        {\n          different_sr = TRUE\n        }\n      }\n      ### no difference in success rate\n      if(! different_sr)\n      {\n        ### now check steps, but only if both are finding something\n        #  if(!is.na(sr_first) & !is.na(sr_other) & sr_first > 0 & sr_other >0)\n        {\n          w = wilcox.test(v,z,exact=FALSE)\n          pvA = w$p.value\n          \n          if(is.nan(pvA)){\n            pvA = 1\n          }\n          #if(!is.nan(pv) & pv <= 0.05)\n          {\n            #\t\t\tcat(\"\\nNo Difference in Success Rates - Comparing Iterations\\n\")\n            \n            AVal = measureA(v,z)\n            \n            #cat(\"Mean - Break \", mean(v)+1,\"\\n\")\n            #cat(\"Mean - Combined \", mean(z)+1,\"\\n\")\n            #print(\"A statistics\")\n            \n            #cat(\"v:: \", v)\n            #cat(\"\\nz:: \", z)\n            #cat(\"\\n, A12 =\", AVal, \"\\n\")\n            \n          }\n          \n          \n        }\n        #  else{\n        #     eff = -888\n        \n        # }\n      }\n      \n      if(AVal != -999){ #we calculated the A12\n        cat(a, \"\\t\", prob, \"\\t\", sr_first, \"\\t\", sr_other , \"\\t\", AVal, \"\\t\", pvA, \"\\t i\"  )\n        \n      }\n      else{\n        cat(a, \"\\t\", prob, \"\\t\", sr_first, \"\\t\", sr_other , \"\\t\", eff, \"\\t\", pvE   )\n      }\n      \n      cat(\"\\n\")\n      \n    }\n    \n  }\n}  \n\nmeasureA <- function(a,b)\n{\n  r = rank(c(a,b))\n  r1 = sum(r[seq_along(a)])\n  \n  m = length(a)\n  \n  n = length(b)\n  A = (r1/m - (m+1)/2)/n\n  \n  A\n}  \nsuccessrate_table2 <-  function(){\n  #files <- c(1,1,2)\n  #files <- c(\"output_1.txt\",\"output_2.txt\")\n  # alg   id found\n  \n  dt <- read.table(SOURCE_FILE,header=T)\n  \n  algos = sort(unique(dt$Algo))\n  probs = sort(unique(dt$id))\n  types = sort(unique(dt$Type))\n  \n  cat(\" Comparison \\t Id \\t O/A \\t p-value\")\n  cat(\"\\n\")\n  \n  for(prob in probs)\n  {  \n    eff<- -99\n    pvA <- -1\n    pvE <- -1\n    AVal <- -999\n    index <- -1\n    \n    \n    totAVM <- 0\n    sucAVM <- 0\n    failAVM <- 0\n    srAVM <- 0.0\n    totSSGA <- 0\n    sucSSGA <- 0\n    failSSGA <- 0\n    srSSGA <- 0.0\n    totOpOEA<- 0 \n    sucOpOEA <- 0\n    failOpOEA <- 0\n    srOpOEA <- 0.0\n    totRS <- 0\n    sucRS <- 0\n    failRS <- 0\n    srRS <- 0.0\n    \n    vAVM=list()\n    vSSGA=list()\n    vOpOEA=list()\n    vRS=list()\n    \n    \n    for(a in algos)\n    {\n      \n      if(a==\"AVM\")\n      {\n        totAVM = length(dt[dt$Algo==a & dt$id==prob & dt$Type==\"Break\" ,ITERATIONS])\n        \n        sucAVM = length(dt[dt$Algo==a & dt$id==prob & dt$Type == \"Break\" & dt$Found=='true',ITERATIONS])\n        \n        \n        failAVM = length(dt[dt$Algo==a & dt$id==prob & dt$Type == \"Break\" & dt$Found=='false',ITERATIONS])\n        srAVM = sucAVM/totAVM\n        vAVM=dt[dt$Algo==a & dt$id==prob & dt$Type==\"Break\" ,ITERATIONS];\t\n      }\n      if(a==\"SSGA\")\n      {\n        totSSGA = length(dt[dt$Algo==a & dt$id==prob & dt$Type==\"Break\" ,ITERATIONS])\n        sucSSGA = length(dt[dt$Algo==a & dt$id==prob & dt$Type == \"Break\" & dt$Found=='true',ITERATIONS])\n        failSSGA = length(dt[dt$Algo==a & dt$id==prob & dt$Type == \"Break\" & dt$Found=='false',ITERATIONS])\n        srSSGA = sucSSGA/totSSGA\n        vSSGA=dt[dt$Algo==a & dt$id==prob & dt$Type==\"Break\" ,ITERATIONS];\t\n        \n      }\n      if(a==\"OpOEA\")\n      {\n        totOpOEA = length(dt[dt$Algo==a & dt$id==prob & dt$Type==\"Break\" ,ITERATIONS])\n        sucOpOEA = length(dt[dt$Algo==a & dt$id==prob & dt$Type == \"Break\" & dt$Found=='true',ITERATIONS])\n        failOpOEA = length(dt[dt$Algo==a & dt$id==prob & dt$Type == \"Break\" & dt$Found=='false',ITERATIONS])\n        srOpOEA = sucOpOEA/totOpOEA\n        vOpOEA=dt[dt$Algo==a & dt$id==prob & dt$Type==\"Break\" ,ITERATIONS];\t\n        \n      }\n      if(a==\"RS\")\n      {\n        totRS = length(dt[dt$Algo==a & dt$id==prob & dt$Type==\"Break\" ,ITERATIONS])\n        sucRS = length(dt[dt$Algo==a & dt$id==prob & dt$Type == \"Break\" & dt$Found=='true',ITERATIONS])\n        failRS = length(dt[dt$Algo==a & dt$id==prob & dt$Type == \"Break\" & dt$Found=='false',ITERATIONS])\n        srRS = sucRS/totRS\n        vRS=dt[dt$Algo==a & dt$id==prob & dt$Type==\"Break\" ,ITERATIONS];\n      }\n    }\n    \n    \n    #################### AVM vs EA\n    \n    \n    a1=sucAVM\n    b=sucOpOEA\n    n=totAVM\n    m=totOpOEA\n    c=failAVM\n    e=failOpOEA\n    sr_first =srAVM  \n    sr_other = srOpOEA \n    different_sr = FALSE\n    v=vAVM\n    z=vOpOEA\n    \n    cat(\"\\n\")\n    cat(\"\\nAVM v/s EA\\t\")\n    calculateAndPrintValue(a1, b, v, z, sr_first, sr_other, prob, n, m, c, e)\n    \n    \n    \n    \n    \n    ############################# AVM vs RS\n    eff<- -99\n    pvA <- -1\n    pvE <- -1\n    AVal <- -999\n    index <- -1\n    \n    \n    a1=sucAVM\n    b=sucRS\n    n=totAVM\n    m=totRS\n    c=failAVM\n    e=failRS\n    sr_first =srAVM  \n    sr_other = srRS \n    different_sr = FALSE\n    v=vAVM\n    z=vRS\n    \n    \n    cat(\"\\n\")\n    cat(\"\\nAVM v/s RS\\t\")\n    calculateAndPrintValue(a1, b, v, z, sr_first, sr_other, prob, n, m, c, e)\n    \n    \n    \n    \n    \n    ############################# AVM vs GA\n    eff<- -99\n    pvA <- -1\n    pvE <- -1\n    AVal <- -999\n    index <- -1\n    \n    a1=sucAVM\n    b=sucSSGA\n    n=totAVM\n    m=totSSGA\n    c=failAVM\n    e=failSSGA\n    sr_first =srAVM  \n    sr_other = srSSGA \n    different_sr = FALSE\n    v=vAVM\n    z=vSSGA\n    \n    cat(\"\\n\")\n    cat(\"\\nAVM v/s GA\\t\")\n    \n    calculateAndPrintValue(a1, b, v, z, sr_first, sr_other, prob, n, m, c, e)\n    \n    \n    \n    \n    ############################# EA vs RS\n    eff<- -99\n    pvA <- -1\n    pvE <- -1\n    AVal <- -999\n    index <- -1\n    \n    \n    a1=sucOpOEA\n    b=sucRS\n    n=totOpOEA\n    m=totRS\n    c=failOpOEA\n    e=failRS\n    sr_first =srOpOEA  \n    sr_other = srRS \n    different_sr = FALSE\n    v=vOpOEA\n    z=vRS\n    \n    cat(\"\\n\")\n    cat(\"\\nEA v/s RS\\t\")\n    calculateAndPrintValue(a1, b, v, z, sr_first, sr_other, prob, n, m, c, e)\n    \n    \n    \n    ############################# EA vs GA\n    eff<- -99\n    pvA <- -1\n    pvE <- -1\n    AVal <- -999\n    index <- -1\n    \n    a1=sucOpOEA\n    b=sucSSGA\n    n=totOpOEA\n    m=totSSGA\n    c=failOpOEA\n    e=failSSGA\n    sr_first =srOpOEA  \n    sr_other = srSSGA \n    different_sr = FALSE\n    v=vOpOEA\n    z=vSSGA\n    cat(\"\\n\")\n    cat(\"\\nEA v/s GA\\t\")\n    \n    calculateAndPrintValue(a1, b, v, z, sr_first, sr_other, prob, n, m, c, e)\n    \n    \n    \n    \n    ############################# RS vs GA\n    eff<- -99\n    pvA <- -1\n    pvE <- -1\n    AVal <- -999\n    index <- -1\n    \n    a1=sucRS\n    b=sucSSGA\n    n=totRS\n    m=totSSGA\n    c=failRS\n    e=failSSGA\n    sr_first =srRS  \n    sr_other = srSSGA \n    different_sr = FALSE\n    v=vRS\n    z=vSSGA\n    \n    \n    cat(\"\\n\")\n    cat(\"\\nRS v/s GA\\t\")\n    calculateAndPrintValue(a1, b, v, z, sr_first, sr_other, prob, n, m, c, e)\n    \n    \n  }\n  \n  \n  \n}\n\n\n\n\n\n\n\ncalculateAndPrintValue <- function(a1, b, v, z, sr_first, sr_other, prob, n, m, c, e)\n{\n  eff<-0.0\n  different_sr = FALSE\n  AVal <- -999\n  if(!is.na(sr_first) & !is.na(sr_other) & sr_first != sr_other)\n  {\n    d = 0.5\n    mat = matrix(c(a1,n-a1,b,m-b), 2 ,2)\n    ft = fisher.test(mat,conf.int = FALSE)\n    pvE = ft$p.value  \n    \n    \n    eff  = ((a1+d)*(e+d))   /  ((b+d)*(c+d))\n    \n    \n    if(!is.nan(pvE) & pvE <= 0.05)\n    {\n      different_sr = TRUE\n      \n    }\n    \n    \n  }\n  \n  if(! different_sr)\n  {\n    w = wilcox.test(v,z,exact=FALSE)\n    pvA = w$p.value\n    \n    if(is.nan(pvA)){\n      pvA = 1\n    }\n    AVal = measureA(v,z)\n  }\n  \n  \n  \n  \n  if(AVal != -999){ #we calculated the A12\n    cat( prob, \"\\t\", sr_first, \"\\t\", sr_other , \"\\t\", AVal, \"\\t\", pvA, \"\\t i\"  )\n    \n  }\n  else{\n    cat( prob, \"\\t\", sr_first, \"\\t\", sr_other , \"\\t\", eff, \"\\t\", pvE   )\n  }\n  cat(\"\\n\")\n  \n}",
    "created" : 1457777096553.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "394927022",
    "id" : "2F19AC47",
    "lastKnownWriteTime" : 1461847229,
    "last_content_update" : 1461847229279,
    "path" : "C:/Users/Atif/Desktop/emse.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}