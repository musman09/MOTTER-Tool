- The extracted "Branch Conditions" for both the case studies (ATL: SimpleClass2RDBMS and MOF: Code Generator) are placed in the base directory of "Experiment Data". The branch condition is an important aspect required to replicate the experiments. The File 'ATL Branch Conditions.txt' has 108 conditions represented in OCL to be solved. Similarly, the File 'MOF branch Conditions.txt' represents 148 conditions to be solved to maximize branch conditions. Both the files contain true as well as false branch conditions.

- The Meta-models used to generate valid test models instance for each condition are placed in the' Metamodels' folder. The metamodel contains "Class" metamodel for ATL and "StateMachine" metamodel for MofScript. The metamodels are required to generate test model instances for both case studies. Some sample instance models generated by the MOTTER tool are also placed in the 'Tool Generated Sample Models'folder for better understandability. The generated models are used as input for the two transformation case studies. For ATL transformation model instance needs to be in 'xmi' format, whereas for MOfScript, the generated model instance, i.e., State Machine, is required. The generated state machine must also be profiled to run by the MofScript Industrial case study.

- The four "Experiment" folders (Experiment Approach vs Fitness Hueristics, Experiment Approach vs Proposed Hueristics, Experiment Fitness vs Proposed Hueristics, and Experiment Branch Conditions) represent the output that we have obtained by running four search algorithms hundred times. The AVM represents Alternative Variable Method, (1+1) EA represented as OpOEA, Genetic also represented as SSGA and RS as random Search. Each line in the file shows seven values: 

1: 'Algo' that represents the name of the algorithm, values any one of: AVM, SSGA, RS, OPoEA. 
2: 'Type' showing experiment type which can either be 'break' or 'combined' (break: representing the use of the proposed solution having both branch distance and approach level, whereas combined" is used only when comparing approach level, fitness with the proposed approach).
3: 'Runs' showing no of time each algorithm runs. In these experiments, each algorithm runs 100 times for each condition.
4: 'Id' representing the condition id that current execution is aiming to solve.
5: 'Iterations' represents the iteration count algorithms spent to solve a specific condition id.
6: 'Found' shows solution found or not, i.e., solver able to generate instance model for the given condition or not.
7: 'Time' representing time in milliseconds which algorithm iterations have taken to find a solution, i.e., generating an instance model. 

The folder 'Experiment Fitness vs. Proposed Heuristics' shows the performance of each algorithm w.r.t fitness function and its comparison with the proposed combination of heuristics. Similarly, the folder 'Experiment Approach vs. Proposed Heuristics' shows the performance of each algorithm w.r.t approach level heuristics and its comparison with the proposed combination of heuristics. 

We have also placed an R Studio project containing script files that we used to generate various tables and apply statistical tests.